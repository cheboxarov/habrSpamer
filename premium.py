import re

from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon import functions, types
import json
from telethon.tl.types import MessageEntityCustomEmoji, InputPeerUser
from telethon.tl.functions.messages import SendMessageRequest
from telethon.extensions import html, markdown
class CustomMarkdown:
    @staticmethod
    def parse(text):
        text, entities = markdown.parse(text)
        for i, e in enumerate(entities):
            if isinstance(e, types.MessageEntityTextUrl):
                if e.url == 'spoiler':
                    entities[i] = types.MessageEntitySpoiler(e.offset, e.length)
                elif e.url.startswith('emoji/'):
                    entities[i] = types.MessageEntityCustomEmoji(e.offset, e.length, int(e.url.split('/')[1]))
        return text, entities
    @staticmethod
    def unparse(text, entities):
        for i, e in enumerate(entities or []):
            if isinstance(e, types.MessageEntityCustomEmoji):
                entities[i] = types.MessageEntityTextUrl(e.offset, e.length, f'emoji/{e.document_id}')
            if isinstance(e, types.MessageEntitySpoiler):
                entities[i] = types.MessageEntityTextUrl(e.offset, e.length, 'spoiler')
        return markdown.unparse(text, entities)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ API ID –∏ API Hash, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É Telegram
settings = json.loads(open("config.json", "r").read())

# –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É
client = TelegramClient(StringSession(open("accounts/+79956470706.session", "r").read().strip()), settings["api_id"], settings["api_hash"])

def html_to_markdown(html):
    print(html)
    regs = re.findall(r'<tg-emoji emoji-id="\d+">.</tg-emoji>', html)
    print(regs)
    for reg in regs:
        id = re.findall(r"\d+", reg)[0]
        html = html.replace(reg, f"[‚ù§Ô∏è](emoji/{id})")
    regs = re.findall(r'<span class="tg-spoiler">.+</span>', html)
    for reg in regs:
        newreg = reg.replace('<span class="tg-spoiler">', "[").replace("</span>", "](spoiler)")
        html = html.replace(reg, newreg)
    html = html.replace('</tg-emoji>', '')
    return html

async def main():
    await client.connect()
    client.parse_mode = CustomMarkdown()
    # –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ username
    chat_id = 'wlovemm'

    # –ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
    premium_emoji_id = 5348499619540119956  # –ü—Ä–∏–º–µ—Ä ID —ç–º–æ–¥–∑–∏

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞
    entity = await client.get_input_entity(chat_id)
    smile = "[‚ù§Ô∏è](emoji/10002345)"
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏
    emoji_entity = MessageEntityCustomEmoji(offset=0, length=1, document_id=premium_emoji_id)
    text = '<tg-emoji emoji-id="5447183459602669338">üîΩ</tg-emoji><tg-emoji emoji-id="5244837092042750681">üìà</tg-emoji><tg-emoji emoji-id="5447410659077661506">üåê</tg-emoji><tg-emoji emoji-id="5438169607443599829">ü§©</tg-emoji><tg-emoji emoji-id="5422369870165584898">ü•∞</tg-emoji><tg-emoji emoji-id="5253800186278325174">ü§©</tg-emoji><tg-emoji emoji-id="5357314112202224814">üòõ</tg-emoji><tg-emoji emoji-id="5440422734402173876">üòâ</tg-emoji><b>–ø—Ä–∏–≤–µ—Ç</b> <code>–ø—Ä–∏–≤–µ—Ç –∂–∞–∂–∞–∑–≤—Ö–ø—ç—ç–∞</code><blockquote>–ø–∑–∑—É</blockquote><span class="tg-spoiler">–ø–æ–∑–∞</span>'
    print(html_to_markdown(text))
    t, e = html.parse(html_to_markdown(text))
    txt = markdown.unparse(t, e)
    print(txt)
    message_text = 'üôÉ'  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–∏–º–≤–æ–ª –≤
    await client.send_message(chat_id, txt)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏
    # await client(SendMessageRequest(
    #     peer=entity,
    #     message=message_text,
    #     entities=[emoji_entity]
    # ))


with client:
    client.loop.run_until_complete(main())